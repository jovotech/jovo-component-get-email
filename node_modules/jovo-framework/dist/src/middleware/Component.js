"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_cms_i18next_1 = require("jovo-cms-i18next");
const _merge = require("lodash.merge");
const path = require("path");
class Component {
    constructor(config) {
        this.config = {};
        this.handler = {};
        if (config) {
            this.config = _merge(this.config, config);
        }
    }
    install(app) {
        // load components i18n files before setup as in setup the i18n object is initialized
        app.middleware('before.setup').use(this.loadI18nFiles.bind(this));
        app.middleware('after.platform.init').use(this.initialize.bind(this));
        this.i18next = new jovo_cms_i18next_1.I18Next();
    }
    /**
     * Adds the components i18n files to the $cms.I18Next object
     * @param handleRequest
     */
    async loadI18nFiles(handleRequest) {
        const pathToComponent = `../components/${this.name}/`;
        const filesDir = path
            .join(pathToComponent, this.pathToI18n || '')
            .replace(new RegExp('\\' + path.sep, 'g'), '/');
        this.i18next.config.filesDir = filesDir;
        this.i18next.loadFiles(handleRequest);
    }
    /**
     * Adds a reference to a specific component inside the $components object
     * @param handleRequest
     */
    initialize(handleRequest) {
        if (!handleRequest.jovo.$components) {
            handleRequest.jovo.$components = {};
        }
        handleRequest.jovo.$components[this.name] = this;
    }
    /**
     * Merges the component's default config with the config defined in the project's main config.js file,
     * and saves it inside components `config` property
     * @param {Config} appConfig config defined in project's main config.js file
     */
    mergeConfig(appConfig) {
        const mergedComponentConfig = _merge(this.config, appConfig);
        return mergedComponentConfig;
    }
}
exports.Component = Component;
//# sourceMappingURL=Component.js.map